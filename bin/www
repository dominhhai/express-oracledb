#!/usr/bin/env node

/**
 * Module dependencies.
 */

var cluster = require('cluster')
var path = require('path')
var app = require('../app')
var debug = require('debug')('demo')
var http = require('http')
var database = require('../models/db')
var server
var openHttpConnections = {}

var appDir = path.resolve(__dirname, '..')
var logDir = path.join(appDir, 'logs')
/**
 * make a log directory, just in case it isn't there.
 */
try {
  require('fs').mkdirSync(logDir)
} catch (e) {
  if (e.code != 'EEXIST') {
    console.error("Could not set up log directory, error was: ", e)
    process.exit(1)
  }
}

var log4js = require('log4js')
log4js.configure(path.join(appDir, 'config/log4js.json'), {cwd: logDir})
var log = log4js.getLogger("startup")

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(require('../config/config').port)
app.set('port', port)


if (cluster.isMaster) {
  var cpuCount = require('os').cpus().length
  for (var i = 0; i < cpuCount; i ++) {
    cluster.fork()
  }

  cluster.on('online', function (worker, code, signal) {
    log.info('Worker ' + worker.id + ' is online')
  })

  cluster.on('disconnect', function (worker, code, signal) {
    log.error('Worker ' + worker.id + ' disconnect')
  })

  cluster.on('exit', function (worker, code, signal) {
    log.error('Worker ' + worker.id + ' exited')
    cluster.fork()
    log.info('Forked new worker')
  })

} else {
  /**
   * Create HTTP server.
   */

  server = http.createServer(app)

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port)
  server.on('error', function (error) {
    if (error.syscall !== 'listen') {
      throw error
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        log.error(bind + ' requires elevated privileges')
        shutdown()
        break
      case 'EADDRINUSE':
        log.error(bind + ' is already in use')
        shutdown()
        break
      default:
        throw error
    }
  })

  server.on('listening', function () {
    var addr = server.address()
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
    log.info('Woker(' + cluster.worker.id + ') Listening on ' + bind)
  })

  server.on('connection', function(conn) {
    var key = conn.remoteAddress + ':' + (conn.remotePort || '')
    openHttpConnections[key] = conn
    conn.on('close', function() {
      delete openHttpConnections[key]
    })
  })

  process.on('uncaughtException', function(err) {
    log.error('Uncaught exception ', err)
    shutdown()
  })

  process.on('SIGTERM', function () {
    log.info('Received SIGTERM')
    shutdown()
  })

  process.on('SIGINT', function () {
    log.info('Received SIGINT')
    shutdown()
  })
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

function shutdown() {
  log.info('Shutting down')
  log.info('Closing web server')

  server.close(function () {
    log.info('Web server closed')
    database.terminatePool(function () {
      log.info('Exiting process')
      process.exit(0)
    })
  })
  for (var key in openHttpConnections) {
    openHttpConnections[key].destroy()
  }
}
