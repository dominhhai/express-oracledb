#!/usr/bin/env node

/**
 * Module dependencies.
 */

var cluster = require('cluster')
var app = require('../app')
var debug = require('debug')('graph:server')
var http = require('http')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)


if (cluster.isMaster) {
  var cpuCount = require('os').cpus().length
  for (var i = 0; i < cpuCount; i ++) {
    cluster.fork()
  }

  cluster.on('online', function (worker, code, signal) {
    console.log('Worker ' + worker.id + ' is online')
  })

  cluster.on('disconnect', function (worker, code, signal) {
    console.error('Worker ' + worker.id + ' disconnect')
  })

  cluster.on('exit', function (worker, code, signal) {
    console.error('Worker ' + worker.id + ' exited')
    cluster.fork()
    console.log('Forked new worker')
  })

} else {
  /**
   * Create HTTP server.
   */

  var server = http.createServer(app)

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port)
  server.on('error', function (error) {
    if (error.syscall !== 'listen') {
      throw error
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges')
        process.exit(1)
        break
      case 'EADDRINUSE':
        console.error(bind + ' is already in use')
        process.exit(1)
        break
      default:
        throw error
    }
  })

  server.on('listening', function () {
    var addr = server.address()
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
    console.log('Woker(' + cluster.worker.id + ') Listening on ' + bind)
  })
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}
